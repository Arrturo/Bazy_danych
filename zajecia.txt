LAB_04

Zad1 
b)
alter table walizka drop foreign key walizka_ibfk_1;
alter table przetwory drop foreign key przetwory_ibfk_1;
alter table przetwory drop foreign key przetwory_ibfk_2;
alter table przetwory drop foreign key przetwory_ibfk_3;
alter table postac modify id_postaci int;
alter table postac drop foreign key;
alter table postac drop primary key;

Zad2
a)
 alter table postac add column pesel VARCHAR(11) not NULL FIRST;
 update postac set pesel='21645938741'+id_postaci;
 alter table postac add primary key(pesel);

b)
ALTER TABLE postac MODIFY rodzaj enum('wiking','kobieta','ptak','syrena');
 
c)
INSERT INTO postac values('21158432017', 8, 'Gertruda Nieszczera', NULL,'Wola','syrena','1920-09-11','18')

Zad3
a)
UPDATE postac SET statek='Pierog' WHERE nazwa LIKE '%a%';
b)
UPDATE statek SET max_ladownosc=max_ladownosc*0,7 WHERE data_wodowania < '1901-01-01' and data_wodowania >='1801-01-01';
c)
alter table postac add check (wiek<1001);
insert into postac values('12343256431', '9', 'Geralt', 'kapitan', 'Pierog', 'Ptak', 1783-06-28', '2000');

Zad4
a)
Alter table postac modify rodzaj enum('ptak','syrena','wiking','kobieta','waz');
INSERT INTO postac(pesel,id_postaci,nazwa,rodzaj,data_ur,wiek) values('11111111111','11','Loko','waz','1900-12-12','28');

b)

CREATE TABLE marynarz LIKE postac;
INSERT INTO marynarz SELECT * FROM postac where statek='Pierog'
INSERT INTO marynarz SELECT * FROM postac where statek='Wola'

Zad5
a)
 UPDATE postac set statek=NULL WHERE rodzaj='wiking';
b)
DELETE FROM postac where id_postaci=5;
c)
 delete from statek;
d) 
ALTER TABLE postac DROP FOREIGN KEY postac_ibfk_1;
DROP TABLE statek;

e)
CREATE TABLE zwierz (id int PRIMARY KEY auto_increment, nazwa VARCHAR(30) NOT NULL, wiek SMALLINT UNSIGNED);

f)
INSERT INTO zwierz select id_postaci,nazwa,wiek from postac WHERE rodzaj='ptak';
INSERT INTO zwierz select id_postaci,nazwa,wiek from postac WHERE rodzaj='waz';



LAB_05

Zad1

1.
 CREATE TABLE ekwipunek select * from wikingowie.ekwipunek;
2.
select * from zasob;
3.
select * from zasob where rodzaj='jedzenie';
4.
SELECT idZasobu, ilosc from ekwipunek where idKreatury IN(1,3,5);


Zad 2

1.
 SELECT * from kreatura where rodzaj!='wiedzma' AND udzwig>=50;
2.
 SELECT * from zasob where waga BETWEEN 3 AND 5;
3.
 select * from kreatura where nazwa like '%or%' and udzwig between 30 and 70 ;

Zad 3
1.
 SELECT * from zasob where month(dataPozyskania) in (7,8);

2.
 select * from zasob where rodzaj !='':

3.
select * from zasob where rodzaj='jedzenie' order by waga limit 5;

Zad 4
1.
 SELECT distinct rodzaj from zasob;
2.
select concat(nazwa,"-",rodzaj) as zlepione from kreatura WHERE rodzaj LIKE 'wi%';
3.
SELECT nazwa, ilosc*waga as waga_calkowita from zasob where year(dataPozyskania) between 2000 and 2007;

Zad 5
1.
select nazwa,ilosc*waga*0.7 as 'masa wlasciwa',ilosc*waga*0.3 as 'odpady' from zasob ;

2.
SELECT nazwa from zasob where rodzaj is null;

3.
SELECT DISTINCT rodzaj FROM zasob WHERE nazwa LIKE 'Ba%' OR nazwa LIKE '%os' ORDER BY rodzaj asc;


LAB_06

Zad1
1.
select avg(waga) from kreatura where rodzaj='wiking';
2.
select rodzaj, avg(waga) as 'srednia Waga', count(nazwa) as 'liczbaKreatur' from kreatura group by rodzaj;
3.
select rodzaj, avg(year(current_timestamp)-year(dataUr)) as 'sredni wiek' from kreatura group by rodzaj;

Zad2

1.
select rodzaj, sum(waga*ilosc) from zasob group by rodzaj;
2.
Select nazwa, avg(waga) from zasob group by nazwa having avg(waga)>10 and sum(ilosc)>=4;
3.
select rodzaj, count(distinct(nazwa)) from zasob group by rodzaj having sum(ilosc)>1;

Zad 3.
1.
select k.nazwa,e.idZasobu,e.ilosc from kreatura as k inner join ekwipunek e on k.idKreatury=e.idKreatury;
2.
select k.nazwa, z.nazwa, e.ilosc from kreatura as k, zasob as z, ekwipunek as e where k.idKreatury=e.idKreatury and z.idZasobu=e.idZasobu;
3.
SELECT idKreatury FROM kreatura WHERE idKreatury NOT IN (SELECT idKreatury FROM ekwipunek WHERE idKreatury IS NOT NULL);

Zad 4.
1.
select k.nazwa, z.nazwa from kreatura as k natural join ekwipunek e inner join zasob z on e.idZasobu=z.idZasobu where k.dataUr between '1670-01-01' and '1679-12-31' and k.rodzaj='wiking';
2.
select k.nazwa,k.dataUr from kreatura as k natural join ekwipunek e inner join zasob z on e.idZasobu=z.idZasobu where z.rodzaj='jedzenie' order by k.dataUr desc limit 5;
3.
SELECT concat(k1.nazwa,'-',k2.nazwa) from kreatura k1, kreatura k2 where k1.idKreatury=k2.idKreatury+5;

Zad 5.
1.
SELECT k.rodzaj, avg(e.ilosc*z.waga) as srednia from kreatura as k inner join ekwipunek as e inner join zasob as z on k.idKreatury=e.idKreatury and e.idZasobu=z.idZasobu where k.rodzaj NOT IN('malpa', 'waz') group by k.rodzaj having sum(e.ilosc)<30;



LAB_07

Zad1
1.
delete from kreatura; insert into kreatura select * from wikingowie.kreatura;
create table etapy_wyprawy select * from wikingowie.etapy_wyprawy;
create table uczestnicy select * from wikingowie.uczestnicy;
create table wyprawa select * from wikingowie.wyprawa;
create table sektor select * from wikingowie.sektor;

2.
SELECT k.nazwa, u.id_uczestnika FROM kreatura as k LEFT JOIN uczestnicy as u ON k.idKreatury=u.id_uczestnika WHERE u.id_uczestnika is NULL;
3.
SELECT w.nazwa, SUM(e.ilosc) FROM kreatura as k, wyprawa as w, uczestnicy as u, ekwipunek as e WHERE k.idKreatury=e.idKreatury AND k.idKreatury=u.id_uczestnika AND u.id_wyprawy=w.id_wyprawy GROUP BY w.nazwa;


Zad2.
1.
Select nazwa group_concat(nazwa separator ' ') from kreatura group by rodzaj;
2.
select w.nazwa, count(u.id_uczestnika), group_concat(k.nazwa separator ',') from wyprawa as w, uczestnicy as u, kreatura as k where w.id_wyprawy=u.id_wyprawy and u.id_uczestnika=k.idKreatury order by w.data_rozpoczecia, e.kolejnosc;

Zad3.
1.
select id_sektora,count(idEtapu) as odwiedzany from sektor s left join etapy_wyprawy e on e.sektor=s.id_sektora group by id_sektora ;
2.


Zad4.
1.
select w.nazwa, sum(length(e.dziennik)) as suma from wyprawa as w, etapy_wyprawy as e where e.idWyprawy=w.id_wyprawy group by nazwa having sum(length(e.dziennik)) < 400;
2.


LAB_08
Zad 1.

1.
DELIMITER //
CREATE TRIGGER check_waga
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
IF NEW.waga < 0
THEN
	SET NEW.waga = 0;
END IF;
END
//
DELIMITER ;

Zad. 2

1.

CREATE TABLE archiwum_wyprawy like wyprawa;
ALTER TABLE archiwum_wyprawy MODIFY kierownik VARCHAR(20);
DELIMITER //

CREATE TRIGGER wyprawa_after_delete
AFTER DELETE ON wyprawa
FOR EACH ROW
BEGIN
INSERT INTO archiwum_wyprawy SELECT w.id_wyprawy, w.nazwa, w.data_rozpoczecia,
w.data_zakonczenia, k.nazwa
from wyprawa w, kreatura k
WHERE w.kierownik=k.idKreatury
AND w.id_wyprawy=OLD.id_wyprawy;
END
//
DELIMITER ; 

Zad. 3
1.
DELIMITER //
CREATE PROCEDURE eliksir_sily(IN id int)
BEGIN
Update kreatura set udzwig = 1.2 * udzwig where idKreatury = id;
END
//
DELIMITER ;
2.
DELIMITER //
CREATE FUNCTION big_text()
RETURNS tinytext
BEGIN
DECLARE wielkie_litery tinytext;
SELECT Upper(text) INTO @wielkie_litery;
RETURN @wielkie_litery;
END //
DELIMITER ;

Zad.4
1.
CREATE TABLE system_alarmowy (id_alarmu INT PRIMARY KEY auto_increment, wiadomosc VARCHAR(125));
2.
DELIMITER //
CREATE TRIGGER wyprawa_alarm
AFTER UPDATE ON wyprawa
FOR EACH ROW
BEGIN
DECLARE a INT;
SELECT count(*) INTO a
FROM etapy_wyprawy ew, kreatura k, wyprawa w, uczestnicy u
WHERE ew.idWyprawy=w.id_wyprawy AND k.idKreatury=u.id_uczestnika
AND u.id_wyprawy=w.id_wyprawy
AND k.nazwa='Tesciowa' AND ew.sektor=7
AND w.id_wyprawy=NEW.id_wyprawy;
IF a > 0
THEN INSERT INTO system_alarmowy VALUES(default, 'UWAGA TESCIOWA');

END IF;
END;
//
DELIMITER ;

Zad5.
1.
DELIMITER $$
CREATE PROCEDURE udzwig(OUT s FLOAT, OUT su FLOAT, OUT max FLOAT)
BEGIN

SELECT AVG(udzwig), SUM(udzwig), MAX(udzwig) INTO s, su, max from kreatura;

END
$$
DELIMITER ;